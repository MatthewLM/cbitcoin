# Flags

INCDIR = $(CURDIR)/include
BINDIR = $(CURDIR)/bin
CFLAGS += -Wall -Wno-overflow -pedantic -D_POSIX_C_SOURCE=200809L -I$(INCDIR) -I/usr/local/ssl/include -I/opt/local/include -O3 @COMPILE_CONFIG_FLAGS@ -std=c99
LFLAGS = -L/opt/local/lib -L/usr/local/ssl/lib
ifndef OSTYPE
  OSTYPE = $(shell uname -s|awk '{print tolower($$0)}')
  #export OSTYPE
endif
LIBRARY_VERSION = 2.0
ifeq ($(OSTYPE), darwin)
	LFLAGS += -flat_namespace -dynamiclib -undefined dynamic_lookup
	LIBRARY_EXTENSION=.$(LIBRARY_VERSION).dylib
else # Assuming Linux for now
	LFLAGS += -shared
	LIBRARY_EXTENSION=.$(LIBRARY_VERSION).so
	ADDITIONAL_OPENSSL_FLAGS = -ldl -L/lib/x86_64-linux-gnu/
endif
LIBCFLAGS = @LIB_COMPILE_CONFIG_FLAGS@

# Directory names

# Set vpath search paths

vpath %.h include
vpath %.c src
vpath %.o build
vpath %.d build

# Debugging

debug-all: CFLAGS += -g
debug-all: all

debug-test: CFLAGS += -g
debug-test: test

# Default goal

all: core crypto random network storage file-ec file-no-ec

# Get files for the core library

CORE_FILES = $(wildcard src/*.c)
CORE_OBJS = $(patsubst src/%.c, build/%.o, $(CORE_FILES))

# Core library target linking

core : $(CORE_OBJS) | bin
	$(CC) $(LFLAGS) -o bin/libcbitcoin$(LIBRARY_EXTENSION) $(CORE_OBJS)

# Include header prerequisites

-include build/*.d

# Create build directory

build:
	mkdir build

# Create bin directory

bin:
	mkdir bin

# Core Compilation

$(CORE_OBJS): build/%.o: src/%.c | build
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@
	$(CC) -I$(INCDIR) -MM $< > build/$*.d
	@cp build/$*.d build/$*.P
	@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
            -e '/^$$/ d' -e 's/$$/ :/' < build/$*.P >> build/$*.d;
	@rm build/$*.P

# Dependencies require include/CBDependencies.h as a prerequisite

build/CBOpenSSLCrypto.o build/CBRand.o CBBlockChainStorage.o BLibEventSockets.o: include/CBDependencies.h

# Crypto library target linking

crypto : build/CBOpenSSLCrypto.o | bin
	$(CC) $(LFLAGS) $(ADDITIONAL_OPENSSL_FLAGS) -o bin/libcbitcoin-crypto$(LIBRARY_EXTENSION) build/CBOpenSSLCrypto.o -lcrypto -lssl

# Crypto library compile

build/CBOpenSSLCrypto.o: dependencies/crypto/CBOpenSSLCrypto.c
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

# Random library target linking

random : build/CBRand.o | bin
	$(CC) $(LFLAGS) -o bin/libcbitcoin-rand$(LIBRARY_EXTENSION) build/CBRand.o

# Random library compile

build/CBRand.o: dependencies/random/CBRand.c
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

# Network library target linking

network : build/CBLibEventSockets.o | bin
	$(CC) $(LFLAGS) -o bin/libcbitcoin-network$(LIBRARY_EXTENSION) build/CBLibEventSockets.o -levent_core

# Network library compile

build/CBLibEventSockets.o: dependencies/sockets/CBLibEventSockets.c dependencies/sockets/CBLibEventSockets.h
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

# File IO library target linking

file-ec : build/CBFileEC.o build/CBHamming72.o | bin
	$(CC) $(LFLAGS) -o bin/libcbitcoin-file-ec$(LIBRARY_EXTENSION) build/CBFileEC.o build/CBHamming72.o

file-no-ec : build/CBFileNoEC.o | bin
	$(CC) $(LFLAGS) -o bin/libcbitcoin-file-no-ec$(LIBRARY_EXTENSION) build/CBFileNoEC.o

# File IO library compile

build/CBHamming72.o: dependencies/storage/CBHamming72.c dependencies/storage/CBHamming72.h
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

build/CBFileEC.o: dependencies/storage/CBFileEC.c dependencies/storage/CBFileEC.h dependencies/storage/CBHamming72.h
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

build/CBFileNoEC.o: dependencies/storage/CBFileNoEC.c dependencies/storage/CBFileNoEC.h
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

# Storage library target linking

storage : build/CBBlockChainStorage.o build/CBAddressStorage.o build/CBDatabase.o | bin
	$(CC) $(LFLAGS) -o bin/libcbitcoin-storage$(LIBRARY_EXTENSION) build/CBBlockChainStorage.o build/CBAddressStorage.o build/CBDatabase.o

# Storage library compile

build/CBBlockChainStorage.o: dependencies/storage/CBBlockChainStorage.c dependencies/storage/CBBlockChainStorage.h dependencies/storage/CBDatabase.h
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

build/CBAddressStorage.o: dependencies/storage/CBAddressStorage.c dependencies/storage/CBAddressStorage.h dependencies/storage/CBDatabase.h
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

build/CBDatabase.o: dependencies/storage/CBDatabase.c dependencies/storage/CBDatabase.h
	$(CC) -c $(CFLAGS) $(LIBCFLAGS) $< -o $@

# Clean

clean:
	rm -f build/*.o build/*.d

# Tests

TEST_FILES = $(wildcard test/*.c)
TEST_BINARIES = $(patsubst test/%.c, bin/%, $(TEST_FILES))
TEST_OBJS = $(patsubst test/%.c, build/%.o, $(TEST_FILES))

test : all $(TEST_BINARIES)

$(TEST_BINARIES): bin/%: build/%.o
	$(CC) -lcbitcoin.$(LIBRARY_VERSION) -lpthread -lcbitcoin-crypto.$(LIBRARY_VERSION) -lcbitcoin-network.$(LIBRARY_VERSION) -lcbitcoin-file-ec.$(LIBRARY_VERSION) -lcbitcoin-storage.$(LIBRARY_VERSION) -lcbitcoin-rand.$(LIBRARY_VERSION) -L/opt/local/lib -levent_core -levent_pthreads -lcrypto -L$(BINDIR) $< -o $@
	$@

$(TEST_OBJS): build/%.o: test/%.c
	$(CC) -c $(CFLAGS) -I$(CURDIR)/dependencies/sockets/ -I$(CURDIR)/dependencies/storage $< -o $@
	