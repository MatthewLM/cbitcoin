## This file generated by InlineX::C2XS (version 0.22) using Inline::C (version 0.5)
package CBitcoin::TransactionOutput;

use CBitcoin::Script;

require Exporter;
*import = \&Exporter::import;
require DynaLoader;

$CBitcoin::TransactionOutput::VERSION = '0.01';

DynaLoader::bootstrap CBitcoin::TransactionOutput $CBitcoin::TransactionOutput::VERSION;

@CBitcoin::TransactionOutput::EXPORT = ();
@CBitcoin::TransactionOutput::EXPORT_OK = ();

sub dl_load_flags {0} # Prevent DynaLoader from complaining and croaking


sub new {
	use bigint;
	my $package = shift;
	my $this = bless({}, $package);
	
	my $x = shift;
	unless(ref($x) eq 'HASH'){
		return $this;
	}
	if(defined $x->{'data'} && $x->{'data'} =~ m/^([0-9a-zA-Z]+)$/){
		# we have a tx input which is serialized
		$this->{'data'} = $x->{'data'};
		# check if we can set up script and value to make sure that the data is valid
		$this->script;
		$this->value;
	}
	elsif(
		defined $x->{'value'} && $x->{'value'} =~ m/^[0-9]+$/
		&& defined $x->{'script'} 
	){
		# call this function to validate the data, and get serialized data back
		# this is a C function
		$this->{'data'} = create_txoutput_obj($x->{'script'},$x->{'value'});
	}
	else{
		die "no arguments to create Transaction::Output";
	}
		
	return $this;
}

sub serialized_data {
	my $this = shift;
	return $this->{'data'};
}

sub script {
	my $this = shift;
	return get_script_from_obj($this->{'data'});
}

sub type_of_script {
	my $this = shift;
	return CBitcoin::Script::whatTypeOfScript( $this->script );
}

sub value {
	my $this = shift;
	# this is a C function
	return get_value_from_obj($this->{'data'});
}

1;
