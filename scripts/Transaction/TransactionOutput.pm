## This file generated by InlineX::C2XS (version 0.22) using Inline::C (version 0.5)
package CBitcoin::TransactionOutput;

require Exporter;
*import = \&Exporter::import;
require DynaLoader;

$CBitcoin::TransactionOutput::VERSION = '0.01';

DynaLoader::bootstrap CBitcoin::TransactionOutput $CBitcoin::TransactionOutput::VERSION;

@CBitcoin::TransactionOutput::EXPORT = ();
@CBitcoin::TransactionOutput::EXPORT_OK = ();

sub dl_load_flags {0} # Prevent DynaLoader from complaining and croaking


sub new {
	my $package = shift;
	my $this = bless({}, $package);
	
	my $x = shift;
	unless(ref($x) eq 'HASH'){
		return $this;
	}
	if(defined $x->{'data'}){
		# we have a tx input which is serialized
		$this->importSerializedData($x->{'data'});
		
	}
	elsif($x->{'value'} =~ m/[0-9]+/
		&& defined $x->{'script'}
	){
		# we have the data, let's get the serialized data
		$this->value($x->{'value'});
		$this->script($x->{'script'});
		# call this function to validate the data, and get serialized data back
		$this->deserializeData();
	}
	
	
	return $this;
}


sub script {
	my $this = shift;
	die "not correct TransactionOutput type" unless ref($this) eq 'CBitcoin::TransactionOutput';
	my $x = shift;
	if($x){
		# TODO: validation of some sort
		$this->{script} = $x;
		return $x;
	}
	else{
		return $this->{script};
	}	
}


sub value {
	my $this = shift;
	die "not correct TransactionOutput type" unless ref($this) eq 'CBitcoin::TransactionOutput';
	my $x = shift;
	if($x){
		if($x =~ m/\d+/){
			$this->{value} = $x;
			return $x;			
		}
		else{
			return undef;
		}

	}
	else{
		return $this->{value};
	}	
}

sub serializeddata {
	my $this = shift;
	die "not correct TransactionOutput type" unless ref($this) eq 'CBitcoin::TransactionOutput';
	my $x = shift;
	if($x){
		# TODO
		$this->{serializeddata} = $x;
		return $x;
	}
	else{
		return $this->{serializeddata};
	}	
}


sub deserializeData {
	my $this = shift;
	die "not correct TransactionOutput type" unless ref($this) eq 'CBitcoin::TransactionOutput';

	$this->serializeddata( 
		CBitcoin::TransactionOutput::create_txoutput_obj( 
			$this->script(), 
			$this->value()
		)
	);
	if(defined $this->serializeddata()){
		return 1;
	}
	else{
		return 0;
	}
}
=head2
---++ importSerializedData
Call this when you want the serialized data to be split up, parsed and assigned to other private variables.
=cut
sub importSerializedData {
	my $this = shift;
	die "not correct TransactionOutput type" unless ref($this) eq 'CBitcoin::TransactionOutput';
	
	my $x = shift;
	
	if(
			$this->script(CBitcoin::TransactionOutput::get_script_from_obj($x)	)
			&& $this->value(CBitcoin::TransactionOutput::get_value_from_obj($x)  )
		){
		$this->{serializeddata} = $x;
		return 1;		
	}
	else{
		return undef;
	}
}

1;
