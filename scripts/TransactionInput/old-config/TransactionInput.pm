## This file generated by InlineX::C2XS (version 0.22) using Inline::C (version 0.5)
package CBitcoin::TransactionInput;

use CBitcoin::Script;

require Exporter;
*import = \&Exporter::import;
require DynaLoader;

$CBitcoin::TransactionInput::VERSION = '0.01';

DynaLoader::bootstrap CBitcoin::TransactionInput $CBitcoin::TransactionInput::VERSION;

@CBitcoin::TransactionInput::EXPORT = ();
@CBitcoin::TransactionInput::EXPORT_OK = ();

sub dl_load_flags {0} # Prevent DynaLoader from complaining and croaking

sub new {
	use bigint;
	my $package = shift;
	my $this = bless({}, $package);

	my $x = shift;
	unless(ref($x) eq 'HASH'){
		return $this;
	}
	if(defined $x->{'data'} && $x->{'data'} =~ m/^([0-9a-zA-Z]+)$/){
		# we have a tx input which is serialized
		$this->{'data'} = $x->{'data'};
	
	}
	elsif(
		defined $x->{'prevOutHash'} && $x->{'prevOutHash'} =~ m/^([0-9a-fA-F]+)$/
		&& defined $x->{'prevOutIndex'} && $x->{'prevOutIndex'} =~ m/[0-9]+/
		&& defined $x->{'script'}
	){
		my $sequence = hex('0xFFFFFFFF') unless defined $x->{'sequence'};
		# call this function to validate the data, and get serialized data back
		#char* create_txinput_obj(char* scriptstring, int sequenceInt, char* prevOutHashString, int prevOutIndexInt){
		$this->{'data'} = create_txinput_obj(
			$x->{'script'}
			,$sequence
			,$x->{'prevOutHash'}
			,$x->{'prevOutIndex'}
		);
		$this->script;
		$this->prevOutHash;
		$this->prevOutIndex;
	}
	else{
		die "no arguments to create Transaction::Input";
	}

	return $this;
}

sub serialized_data {
	my $this = shift;
	return $this->{'data'};
}

sub script {
	my $this = shift;
	# this is a C function
	return get_script_from_obj($this->{'data'});
}

sub type_of_script {
	my $this = shift;
	return CBitcoin::Script::whatTypeOfScript( $this->script );
}

sub prevOutHash {
	use bigint;
	my $this = shift;
	# this is a C function
	return get_prevOutHash_from_obj($this->{'data'});
}

sub prevOutIndex {
	use bigint;
	my $this = shift;
	return get_prevOutIndex_from_obj($this->{'data'});
}
sub sequence {
	use bigint;
	my $this = shift;
	return get_sequence_from_obj($this->{'data'});
}



1;
